# Generated by Django 2.0.5 on 2022-11-07 20:54

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.CharField(max_length=200, null=True)),
                ('score', models.IntegerField(default=0)),
                ('following', models.ManyToManyField(related_name='followers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_label', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H')], max_length=1, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalGame',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_team', models.CharField(max_length=200)),
                ('away_team', models.CharField(max_length=200)),
                ('home_score', models.IntegerField(default=0)),
                ('away_score', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('rank', models.IntegerField(null=True)),
                ('points', models.IntegerField(default=0)),
                ('pass_group_winner_prob', models.FloatField(null=True)),
                ('pass_group_runner_prob', models.FloatField(null=True)),
                ('pass_round16_prob', models.FloatField(null=True)),
                ('pass_quarters_prob', models.FloatField(null=True)),
                ('pass_semi_prob', models.FloatField(null=True)),
                ('pass_final_prob', models.FloatField(null=True)),
                ('shaded', models.BooleanField(default=False)),
                ('first', models.BooleanField(default=False)),
                ('second', models.BooleanField(default=False)),
                ('flag_code', models.CharField(max_length=10, null=True)),
                ('group_label', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='api.Group')),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice', models.CharField(choices=[('H', 'H'), ('A', 'A'), ('D', 'D')], max_length=1, null=True)),
                ('correct', models.NullBooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='WorldCupGame',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_score', models.IntegerField(null=True)),
                ('away_score', models.IntegerField(null=True)),
                ('round', models.CharField(db_index=True, max_length=50, null=True)),
                ('home_penalties', models.IntegerField(null=True)),
                ('away_penalties', models.IntegerField(null=True)),
                ('date', models.DateTimeField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('game', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.WorldCupGame')),
                ('home_win', models.FloatField(default=0)),
                ('away_win', models.FloatField(default=0)),
                ('draw', models.FloatField(default=0)),
            ],
        ),
        migrations.AddField(
            model_name='worldcupgame',
            name='away_team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='game_away', to='api.Team'),
        ),
        migrations.AddField(
            model_name='worldcupgame',
            name='home_team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='game_home', to='api.Team'),
        ),
        migrations.AddField(
            model_name='vote',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trends', to='api.WorldCupGame'),
        ),
        migrations.AddField(
            model_name='vote',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='user',
            name='winner_choice',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.Team'),
        ),
        migrations.AlterUniqueTogether(
            name='vote',
            unique_together={('user', 'game')},
        ),
    ]
